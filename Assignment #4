'''Q1: Create a class called BankAccount that has four attributes: bankname, firstname,
lastname, and balance.
The default balance should be set to 0.
In addition, create ...
● A method called deposit() that allows the user to make deposits into their balance.
● A method called withdrawal() that allows the user to withdraw from their balance.
● Withdrawal may not exceed the available balance. Hint: consider a conditional argument
in your withdrawal() method.
● Use the __str__() method in order to display the bank name, owner name, and current
balance.
● Make a series of deposits and withdrawals to test your class'''



''' First portion of problem, create the initial class'''

class BankAccount:
    def attributes_bank(self):
        print("My name is " + self.name)
        print("First name " + self.userf)
        print("Last name " + self.userl)
        print("Balance " + str(self.balance))

'''Provide the attributes'''

bank1 = BankAccount()
bank1.name = "National Bank"
bank1.userf = "Wiktoria"
bank1.userl = "Gnojek"
bank1.balance = 0

bank1.attributes_bank()

'''A method called deposit() that allows the user to make deposits into their balance.'''

'''First, I would revamp the initial class created to make it easier to work with the prompt'''

class BankAccount:
    def __init__(self, name: str, userf: str, userl: str, balance: float):
        self.name = name
        self.userf = userf
        self.userl = userl
        self.balance = balance
        
    def deposit(self, amount):
        self.balance += amount
        print(f"Deposit of {amount} was processed")
  
    def withdrawal(self, amount):
        if amount > self.balance:
            print("Insufficient funds")
        else: 
            self.balance -= amount
 
      
account1 = BankAccount("National Bank", "Wiktoria", "Gnojek", 0)
account1.deposit(10000)
account1.withdrawal(100000000)

'''Q2: Create a class Box that has attributes length and width that takes values for length
and width upon construction (instantiation via the constructor).
In addition, create…
● A method called render() that prints out to the screen a box made with asterisks of
length and width dimensions
● A method called invert() that switches length and width with each other
● Methods get_area() and get_perimeter() that return appropriate geometric calculations
● A method called double() that doubles the size of the box. Hint: Pay attention to return
value here.
● Implement __eq__ so that two boxes can be compared using ==. Two boxes are equal if
their respective lengths and widths are identical.
● A method print_dim() that prints to screen the length and width details of the box
● A method get_dim() that returns a tuple containing the length and width of the box
● A method combine() that takes another box as an argument and increases the length
and width by the dimensions of the box passed in
● A method get_hypot() that finds the length of the diagonal that cuts through the middle
● Instantiate 3 boxes of dimensions 5,10 , 3,4 and 5,10 and assign to variables box1,
box2 and box3 respectively
● Print dimension info for each using print_dim()
● Evaluate if box1 == box2, and also evaluate if box1 == box3, print True or False to the
screen accordingly
● Combine box3 into box1 (i.e. box1.combine())
● Double the size of box2
● Combine box2 into box1'''

import math 

class Box:
    def __init__(self, length, width):
        self.length = length
        self.width = width
    @classmethod
    def from_input(cls):
        length = float(input("Provide length: "))
        width = float(input("Provide width: "))
        return cls(length, width)

    def render(self):
        for i in range(int(self.length)):
            print("*" * int(self.width))
    
    def invert(self):
        self.length, self.width = self.width, self.length
    
    def get_area(self):
        return self.length * self.width
    
    def get_perimeter(self):
        return 2 * (self.length + self.width)
        
    def double(self):
        self.length *= 2
        self.width *= 2
    
    def __eq__(self, other):
        if isinstance(other, Box):
            return self.length == other.length and self.width == other.width
        return False
    
    def print_dim(self):
        print("Length: ", self.length)
        print("Width: ", self.width)
    
    def get_dim(self):
        return(self.length, self.width)
    
    def combine(self, other):
        newl = self.length + other.length
        neww = self.width + other.width
        return Box(newl, neww)
    
    def get_hypot(self):
        return math.sqrt(self.length**2 + self.width**2)


box1 = Box.from_input()
box1.render()
box1.print_dim()


box2 = Box.from_input()
box2.render()
box2.print_dim()

box3 = box1.combine(box2)
box3.render()
box3.print_dim()


if box1 == box2:
    print("Same size")
else: 
    print("Different sizes")


box1 = Box.from_input()
print("Length: ", box1.length)
print("Width: ", box1.width)
box1.render()
box1.invert()
box1.get_area()
box1.get_perimeter()
box1.print_dim()
box1.get_dim()
box1.get_hypot()


'''testing program'''

box1 = Box(5, 10)
box2 = Box(3, 4)
box3 = Box (5, 10)

'''Dimensions for each'''

box1.print_dim()
box2.print_dim()
box3.print_dim()

'''Evaluate if box1 == box2, and also evaluate if box1 == box3, print True or False to the
screen accordingly'''

if box1 == box2:
    print("True")
else: 
    print("False")

if box1 == box3:
    print("True")
else: 
    print("False")

'''Combine box3 into box1 (i.e. box1.combine())'''

box1 = box1.combine(box3)
box1.print_dim()

'''Double the size of box2'''

box2.double()
box2.print_dim()

'''Combine box2 into box1'''

box1 = box1.combine(box2)
box1.print_dim()
